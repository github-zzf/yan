package com.junkj.common.filter;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.junkj.common.exception.SpringUtils;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.JsonUtils;
import com.junkj.common.utils.MemberUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.weixin.biz.WxUserBiz;
import com.junkj.module.weixin.entity.WxUser;

import io.jsonwebtoken.Claims;

public class BaseFilter {

	protected Logger logger = LoggerFactory.getLogger(getClass());

	/**
	 * 静态内部类，延迟加载
	 */
	private static final class Static {
		private static WxUserBiz wxUserBiz = SpringUtils.getBean(WxUserBiz.class);
	}

	/**
	 * 用户验证
	 */
	public WxUser checkUser(HttpServletRequest request, HttpServletResponse response) {

		// 获取用户 token
		String token = request.getHeader(JwtUtils.getHeaderKey());
		if (StrUtils.isBlank(token)) {
			token = request.getParameter(JwtUtils.getHeaderKey());
		}
		// token为空
		if (StrUtils.isBlank(token)) {
			this.sendError(response, JwtUtils.getHeaderKey() + " can not be blank");
			return null;
		}
		// 校验并解析token，如果token过期或者篡改，则会返回null
		Claims claims = JwtUtils.verifyAndGetClaimsByToken(token);
		if (null == claims || claims.get("ee") == null || claims.get("uu") == null) {
			this.sendError(response, JwtUtils.getHeaderKey() + "失效，请重新登录");
			return null;
		}
		long exp = Long.valueOf(claims.get("ee").toString());
		if (exp < System.currentTimeMillis()) {
			this.sendError(response, JwtUtils.getHeaderKey() + "失效，请重新登录");
			return null;
		}
		String openid = claims.get("uu").toString();
		WxUser user = Static.wxUserBiz.get(openid);
		if (null == user) {
			this.sendError(response, JwtUtils.getHeaderKey() + "失效，用户不存在");
			return null;
		}
		return user;
	}

	/**
	 * 缓存用户信息
	 */
	public void setAttribute(HttpServletRequest request, WxUser user) {
		request.setAttribute(MemberUtils.CACHE_WXUSER_, user);
		request.setAttribute(MemberUtils.CACHE_OPENID_, user.getOpenid());
		request.setAttribute(MemberUtils.CACHE_MEMBER_ID_, user.getMemberId());
		request.setAttribute(MemberUtils.CACHE_STAFF_ID_, user.getStaffId());
		request.setAttribute(MemberUtils.CACHE_SALE_ID_, user.getSaleId());
	}

	/**
	 * 输出错误信息
	 */
	public void sendError(HttpServletResponse response, String msg) {
		sendError(response, msg, 401);
	}

	/**
	 * 输出错误信息
	 */
	public void sendError(HttpServletResponse response, String msg, int code) {
		JsonVo vo = JsonVo.sendError(code, msg);
		response.setContentType("application/json;charset=UTF-8");
		try {
			response.getWriter().write(JsonUtils.toString(vo));
		} catch (IOException e) {
			logger.error("过滤器返回信息失败:" + e.getMessage(), e);
		}
	}
}
