package com.junkj.common.filter;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import com.junkj.common.biz.BaseBiz;
import com.junkj.common.exception.SpringUtils;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.JsonUtils;
import com.junkj.common.utils.MemberUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.weixin.biz.WxUserBiz;
import com.junkj.module.weixin.entity.WxUser;

public class MobileFilter extends BaseBiz implements HandlerInterceptor {

	/**
	 * 静态内部类，延迟加载
	 */
	private static final class Static {
		private static WxUserBiz wxUserBiz = SpringUtils.getBean(WxUserBiz.class);
	}

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		JsonVo error = null;

		// 用户验证
		String token = request.getHeader("token");
		if (StrUtils.notBlank(token)) {
			WxUser user = Static.wxUserBiz.getByTokenId(token);
			if (user != null) {
				request.setAttribute(MemberUtils.CACHE_WXUSER_, user);
				request.setAttribute(MemberUtils.CACHE_MEMBER_ID_, user.getMemberId());
				request.setAttribute(MemberUtils.CACHE_STAFF_ID_, user.getStaffId());
				request.setAttribute(MemberUtils.CACHE_SALE_ID_, user.getSaleId());
			} else {
				error = JsonVo.sendError("授权认证没有通过!无效用户");
			}
		} else {
			error = JsonVo.sendError("授权认证没有通过!无效用户");
		}

		if (error != null) {
			PrintWriter writer = null;
			OutputStreamWriter osw = null;
			try {
				response.setContentType("application/json;charset=utf-8");
				osw = new OutputStreamWriter(response.getOutputStream(), "UTF-8");
				writer = new PrintWriter(osw, true);
				String jsonStr = JsonUtils.toString(error);
				writer.write(jsonStr);
				writer.flush();
				writer.close();
				osw.close();
			} catch (UnsupportedEncodingException e) {
				logger.error("过滤器返回信息失败:" + e.getMessage(), e);
			} catch (IOException e) {
				logger.error("过滤器返回信息失败:" + e.getMessage(), e);
			} finally {
				if (null != writer) {
					writer.close();
				}
				if (null != osw) {
					osw.close();
				}
			}
			return false;
		}
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
	}

}