package com.junkj.module.company.action;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.HtmlUtils;

import com.junkj.common.IdGen.IdGenerate;
import com.junkj.common.action.BaseAction;
import com.junkj.common.entity.Page;
import com.junkj.common.form.FormToken;
import com.junkj.common.lang.DateUtils;
import com.junkj.common.lang.NumUtils;
import com.junkj.common.lang.ObjectUtils;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.JsonUtils;
import com.junkj.common.utils.UserUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.company.biz.ComConfigBiz;
import com.junkj.module.company.biz.CourseBiz;
import com.junkj.module.company.biz.CourseEnrollBiz;
import com.junkj.module.company.entity.ComConfig;
import com.junkj.module.company.entity.Course;
import com.junkj.module.company.entity.CourseEnroll;
import com.junkj.module.member.biz.MemberBiz;
import com.junkj.module.member.biz.MemberCardBiz;
import com.junkj.module.member.biz.PointsBiz;
import com.junkj.module.member.entity.Member;
import com.junkj.module.member.entity.MemberCard;
import com.junkj.module.member.entity.Points;

/**
 * 课程预约action
 * 
 * @copyright 大连骏骁网络科技有限公司
 * @author 骏骁(cxmail@qq.com)
 * @createDate 2019年09月26日
 * @version: 1.0.0
 */
@Controller
@RequestMapping(value = "${adminPath}/courseEnroll")
public class CourseEnrollAction extends BaseAction {

	@Autowired
	private CourseEnrollBiz courseEnrollBiz;
	@Autowired
	private CourseBiz courseBiz;
	@Autowired
	private MemberCardBiz cardBiz;
	@Autowired
	private MemberBiz memberBiz;
	@Autowired
	private PointsBiz pointsBiz;
	@Autowired
	private ComConfigBiz comConfigBiz;
	@RequiresPermissions("company:course:view")
	@RequestMapping("")
	public String index(HttpServletRequest request, String id, String name) {
		request.setAttribute("id", id);
		request.setAttribute("courseName", name);
		return "/module/company/courseEnroll";
	}

	@RequiresPermissions("company:course:view")
	@RequestMapping("/kc")
	public String courseEnrollKc(HttpServletRequest request, @RequestParam(required = false) String kechengId,
			@RequestParam(required = false) String now) {
		Course course = courseBiz.get(kechengId);
		// 循环课程
		if (course.getIsWeek().equals(Course.isWeek_1) && !DateUtils.format(course.getCourseDate()).equals(now)) {
			Course kc = courseEnrollBiz.getCopyKc(course.getId(), now);
			if (kc == null) {
				kc = new Course();
				BeanUtils.copyProperties(course, kc);
				kc.setId(IdGenerate.nextId());
				kc.setParentId(course.getId());
				kc.setIsWeek(Course.isWeek_0);
				kc.setCourseDate(DateUtils.parseDate(now));
				courseBiz.insert(kc);
				kc.setId(kc.getId());
			}
			course = kc;
		}
		request.setAttribute("id", course.getId());
		request.setAttribute("courseName", course.getName());
		return "/module/company/courseEnrollKc";
	}

	/**
	 * 分页数据
	 */
	@RequiresPermissions("company:course:view")
	@RequestMapping(value = "listPage")
	@ResponseBody
	public Page<CourseEnroll> listPage(CourseEnroll courseEnroll) {
		Page<CourseEnroll> page = courseEnrollBiz.findPage(courseEnroll);
		return page;
	}

	/**
	 * 列表数据
	 */
	@RequiresPermissions("company:course:view")
	@RequestMapping(value = "findList")
	@ResponseBody
	public List<CourseEnroll> findList(CourseEnroll courseEnroll) {
		List<CourseEnroll> list = courseEnrollBiz.findList(courseEnroll);
		return list;
	}

	/**
	 * 添加或更新
	 */
	@FormToken
	@RequiresPermissions("company:course:edit")
	@RequestMapping(value = "save")
	@ResponseBody
	public JsonVo save(@Validated CourseEnroll courseEnroll, BindingResult result) {
		if (result.hasErrors()) {
			return sendError(result.getFieldError().getDefaultMessage());
		}
		// 获取课程
		Course course = courseBiz.get(courseEnroll.getCourseId());
		if (courseEnroll.getIsNewT()) {
			Double renNum = courseEnrollBiz.findUpperLimit(courseEnroll.getCourseId());
			if (course.getPeopleMax() <= renNum) {
				return sendError("该课程人数达到上限!");
			}
		}
		CourseEnroll courseEnroll1 = courseEnrollBiz.countByMember(courseEnroll.getCourseId(),
				courseEnroll.getMemberId());
		if (courseEnroll1 != null) {
			return sendError("您已预约，不能重复预约");
		}

		// 获取课程
		String mcId = null;
		if (StrUtils.notBlank(course.getCardId())) {
			MemberCard cardWhere = new MemberCard();
			cardWhere.setCardId(course.getCardId());
			cardWhere.setMemberId(courseEnroll.getMemberId());
			// 查询会员会员卡
			List<MemberCard> cardList = cardBiz.getMemberCardList(cardWhere);
			if (cardList.size() > 0) {
				for (MemberCard mCard : cardList) {
					// 判断余额
					if (mCard.getStoredNum() < course.getCardNum()) {
						continue;
					}
					mcId = mCard.getId();
				}
				if (mcId == null) {
					return sendError("会员卡余额不足!");
				}
			} else {
				return sendError("没有满足条件的会员卡!");
			}
		}
		courseEnrollBiz.save(courseEnroll);
		return sendOk("保存成功！");
	}

	/**
	 * 取消预约
	 */
	@RequiresPermissions("company:course:edit")
	@RequestMapping(value = "quxiao")
	@ResponseBody
	public JsonVo quxiao(CourseEnroll courseEnroll) {
		courseEnrollBiz.quxiao(courseEnroll);
		return sendOk("保存成功！");
	}

	/**
	 * 签到
	 */
	@RequiresPermissions("company:course:edit")
	@RequestMapping(value = "qiandao")
	@ResponseBody
	public JsonVo qiandao(CourseEnroll courseEnroll) {
		courseEnroll = courseEnrollBiz.get(courseEnroll.getId());
		courseEnroll.setSignTime(new Date());
		// 获取课程
		Course course = courseBiz.get(courseEnroll.getCourseId());
		String mcId = null;
		if (StrUtils.notBlank(course.getCardId())) {
			MemberCard cardWhere = new MemberCard();
			cardWhere.setCardId(course.getCardId());
			cardWhere.setMemberId(courseEnroll.getMemberId());
			// 查询会员会员卡
			List<MemberCard> cardList = cardBiz.getMemberCardList(cardWhere);
			if (cardList.size() > 0) {
				for (MemberCard mCard : cardList) {
					// 判断余额
					if (mCard.getStoredNum() < course.getCardNum()) {
						continue;
					}
					mcId = mCard.getId();
				}
				if (mcId == null) {
					return sendError("会员卡余额不足!");
				}
			} else {
				return sendError("没有满足条件的会员卡!");
			}
		}
		//课程签到积分
		Member member = memberBiz.get(courseEnroll.getMemberId());
		ComConfig where = new ComConfig();
		where.setConfigKey("sign_send_points");
		where.setComId(UserUtils.getUser().getComId());
		ComConfig comConfig = comConfigBiz.getByEntity(where);
		member.setPoints(String.valueOf(NumUtils.add(Double.valueOf(member.getPoints()),Double.valueOf(comConfig.getConfigValue()))));
		memberBiz.save(member);
		//积分记录
		Points points = new Points();
		points.setMemberId(courseEnroll.getMemberId());
		points.setBizId(courseEnroll.getId());
		points.setType(points.TYPE_1);
		points.setBizType(points.BIZTYPE_2);
		points.setNum(Long.valueOf(comConfig.getConfigValue()));
		pointsBiz.save(points);
		courseEnrollBiz.qiandao(courseEnroll, mcId);
		return sendOk("保存成功！");
	}

	/**
	 * 调课
	 */
	@RequiresPermissions("company:course:edit")
	@RequestMapping(value = "tiaoke")
	@ResponseBody
	public JsonVo tiaoke(CourseEnroll courseEnroll) {
		String courseId = courseEnroll.getCourseId();
		courseEnroll = courseEnrollBiz.get(courseEnroll.getId());
		courseEnroll.setCourseId(courseId);
		// 获取课程
		Course course = courseBiz.get(courseEnroll.getCourseId());
		Double renNum = courseEnrollBiz.findUpperLimit(courseEnroll.getCourseId());
		if (course.getPeopleMax() <= renNum) {
			return sendError("该课程人数达到上限!");
		}
		CourseEnroll courseEnroll1 = courseEnrollBiz.countByMember(courseEnroll.getCourseId(),
				courseEnroll.getMemberId());
		if (courseEnroll1 != null) {
			return sendError("您已预约，不能重复预约");
		}

		String mcId = null;
		if (StrUtils.notBlank(course.getCardId())) {
			MemberCard cardWhere = new MemberCard();
			cardWhere.setCardId(course.getCardId());
			cardWhere.setMemberId(courseEnroll.getMemberId());
			// 查询会员会员卡
			List<MemberCard> cardList = cardBiz.getMemberCardList(cardWhere);
			if (cardList.size() > 0) {
				for (MemberCard mCard : cardList) {
					// 判断余额
					if (mCard.getStoredNum() < course.getCardNum()) {
						continue;
					}
					mcId = mCard.getId();
				}
				if (mcId == null) {
					return sendError("会员卡余额不足!");
				}
			} else {
				return sendError("没有满足条件的会员卡!");
			}
		}
		courseEnrollBiz.save(courseEnroll);
		return sendOk("保存成功！");
	}

	/**
	 * 删除
	 */
	@RequiresPermissions("company:course:edit")
	@RequestMapping(value = "delete")
	@ResponseBody
	public JsonVo delete(CourseEnroll courseEnroll) {
		courseEnrollBiz.delete(courseEnroll);
		return sendOk("删除成功！");
	}

	/**
	 * 导出
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/excelDownload", method = RequestMethod.GET)
	@ResponseBody
	public void excelDownload(HttpServletResponse response, @RequestParam Map<String, Object> params) {
		CourseEnroll enroll = new CourseEnroll();
		enroll.setCourseId(ObjectUtils.toString(params.get("courseId")));
		List<CourseEnroll> list = courseEnrollBiz.findList(enroll);
		if (params.get("col") != null) {
			String data = HtmlUtils.htmlUnescape(params.get("col").toString());
			List<Map<String, Object>> colList = JsonUtils.toObject(data, List.class);
			String[] headerColumns = new String[colList.size()];
			String[] fieldColumns = new String[colList.size()];
			for (int index = 0; index < colList.size(); index++) {
				Map<String, Object> map = colList.get(index);
				headerColumns[index] = "" + map.get("name").toString() + "_#_" + map.get("width").toString() + "";
				fieldColumns[index] = "" + map.get("col").toString();
			}
			excelDownloadT(response, list, "课程明细", headerColumns, fieldColumns);
		}
	}

}