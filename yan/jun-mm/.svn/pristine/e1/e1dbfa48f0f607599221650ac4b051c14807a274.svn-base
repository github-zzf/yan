package com.junkj.common.filter;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.HandlerInterceptor;

import com.junkj.common.config.Global;
import com.junkj.common.utils.ComUtils;
import com.junkj.module.sys.entity.SysCompany;

public class ComFilter extends BaseFilter implements HandlerInterceptor {

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {

		if (Global.isDev()) {
			response.setHeader("Access-Control-Allow-Origin", request.getHeader("Origin"));// 不能为*，*代表接受所有域名访问，如写*则下面一行代码无效。
			response.setHeader("Access-Control-Allow-Headers", "content-type,token");// 不能为*
			response.setHeader("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
			response.setHeader("Access-Control-Allow-Credentials", "true");// 前三行解决跨域，这一句行是携带证书(关键)
			//缓存企业
			ComUtils.setCom("localhost", "测试");
			return true;
		}

		// 域名验证
		String referer = request.getHeader("Referer");
		if (referer == null) {
			sendError(response, "授权认证未通过1!非法域名", 0);
			return false;
		}
		String host = getHost(referer);
		
		String comId = host.split("\\.")[0];
		if (!(comId + "." + Global.mobileUri()).equals(host)) {
			sendError(response, "授权认证未通过2!非法域名", 0);
			return false;
		}
		// 企业编码验证
		SysCompany company = ComUtils.getById(comId);
		if (company == null) {
			sendError(response, "授权认证未通过3!非法域名", 0);
			return false;
		}
		//缓存企业
		ComUtils.setCom(comId, company.getComName());
		return true;
	}

	/**
	 * 匹配域名
	 */
	public static String getHost(String url) {
		Pattern p = Pattern.compile("(?:https?://)((\\w+\\.){2,3}\\w+|[a-zA-z0-9]+)(?::[0-9]+)?");
		Matcher matcher = p.matcher(url);
		if (matcher.find()) {
			return matcher.group(1);
		}
		return null;
	}

}