package com.junkj.module.web.biz;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.junkj.common.IdGen.IdGenerate;
import com.junkj.common.entity.Page;
import com.junkj.common.lang.DateUtils;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.ComUtils;
import com.junkj.common.utils.MemberUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.cms.biz.ArticlesBiz;
import com.junkj.module.cms.biz.ArttypeBiz;
import com.junkj.module.cms.entity.Articles;
import com.junkj.module.cms.entity.Arttype;
import com.junkj.module.company.biz.ActivityBiz;
import com.junkj.module.company.biz.ActivityEnrollBiz;
import com.junkj.module.company.biz.AlbumBiz;
import com.junkj.module.company.biz.CardsBiz;
import com.junkj.module.company.biz.ComConfigBiz;
import com.junkj.module.company.biz.CourseBiz;
import com.junkj.module.company.biz.CourseEnrollBiz;
import com.junkj.module.company.biz.FeedbackBiz;
import com.junkj.module.company.biz.MobileSettingBiz;
import com.junkj.module.company.biz.StaffNoticeSettingBiz;
import com.junkj.module.company.biz.WorkMsgBiz;
import com.junkj.module.company.entity.Activity;
import com.junkj.module.company.entity.ActivityEnroll;
import com.junkj.module.company.entity.Album;
import com.junkj.module.company.entity.Cards;
import com.junkj.module.company.entity.Course;
import com.junkj.module.company.entity.CourseEnroll;
import com.junkj.module.company.entity.Feedback;
import com.junkj.module.company.entity.MobileSetting;
import com.junkj.module.company.entity.StaffNoticeSetting;
import com.junkj.module.company.entity.WorkMsg;
import com.junkj.module.file.biz.FileUploadBiz;
import com.junkj.module.file.entity.FileUpload;
import com.junkj.module.file.entity.FileUploadParams;
import com.junkj.module.member.biz.CardChangeBiz;
import com.junkj.module.member.biz.GrowupBiz;
import com.junkj.module.member.biz.MemberBiz;
import com.junkj.module.member.biz.MemberCardBiz;
import com.junkj.module.member.biz.PointsBiz;
import com.junkj.module.member.entity.CardChange;
import com.junkj.module.member.entity.Growup;
import com.junkj.module.member.entity.Member;
import com.junkj.module.member.entity.MemberCard;
import com.junkj.module.member.entity.Points;
import com.junkj.module.sys.biz.SysConfigBiz;
import com.junkj.module.sys.entity.SysConfig;
import com.junkj.module.sys.entity.SysUser;

/**
 * 员工端biz
 * 
 * @copyright 大连骏骁网络科技有限公司
 * @author 骏骁(cxmail@qq.com)
 * @createDate 2019年10月19日
 * @version: 1.0.0
 */
@Service
@Transactional(readOnly = true)
public class ApiBiz {

	@Autowired
	private MobileSettingBiz mobileSettingBiz;
	@Autowired
	private ArttypeBiz arttypeBiz;
	@Autowired
	private ArticlesBiz articlesBiz;
	@Autowired
	private CourseBiz courseBiz;
	@Autowired
	private CourseEnrollBiz courseEnrollBiz;
	@Autowired
	private ActivityBiz activityBiz;
	@Autowired
	private ActivityEnrollBiz activityEnrollBiz;
	@Autowired
	private CardsBiz cardsBiz;
	@Autowired
	private MemberCardBiz memberCardBiz;
	@Autowired
	private CardChangeBiz cardChangeBiz;
	@Autowired
	private AlbumBiz albumBiz;
	@Autowired
	private FileUploadBiz fileUploadBiz;
	@Autowired
	private GrowupBiz growupBiz;
	@Autowired
	private MemberBiz memberBiz;
	@Autowired
	private FeedbackBiz feedbackBiz;
	@Autowired
	private PointsBiz pointsBiz;
	@Autowired
	private SysConfigBiz sysConfigBiz;
	@Autowired
	private ComConfigBiz comConfigBiz;
	@Autowired
	private WorkMsgBiz workMsgBiz;
	@Autowired
	private StaffNoticeSettingBiz staffNoticeSettingBiz;

	/*******************************************************
	 * 首页
	 */
	/**
	 * 轮播
	 */
	public List<MobileSetting> listHomeImg() {
		MobileSetting setting = new MobileSetting();
		setting.setType(MobileSetting.TYPE_1);
		return mobileSettingBiz.findList(setting);
	}
	/*******************************************************
	 * 文章
	 */
	// 栏目
	public Page<Arttype> pageArttype(Arttype arttype) {
		return arttypeBiz.findPage(arttype);
	}

	// 文章
	public Page<Articles> pageArticles(Articles activity) {
		if(StrUtils.notBlank(activity.getTypeType())){
			Arttype where = new Arttype();
			where.setTypeType(activity.getTypeType());
			Arttype type = arttypeBiz.getByEntity(where);
			if(null != type){
				activity.setTypeId(type.getId());
			}
		}
		return articlesBiz.findPage(activity);
	}

	// 文章详情
	@Transactional(readOnly=false)
	public Articles infoArticles(String id) {
		Articles articles = articlesBiz.get(id);
		FileUpload where = new FileUpload();
		where.setBizType(Articles.FILE_TYPE);
		where.setBizId(id);
		articles.setFileUpload(fileUploadBiz.findList(where));
		articles.setClicks(articles.getClicks()+1);
		articlesBiz.save(articles);
		return articles;
	}
   // 电话导航	
	@Transactional(readOnly=false)
	public Object getSysInfo() {
		String phone = comConfigBiz.getByKey("com_phone");
		String address = comConfigBiz.getByKey("com_coordinate");
		Map<String, Object> map = new HashMap<>();
		map.put("phone", phone);
		map.put("address", address);
		return map;
	}
	/*******************************************************
	 * 服务预约
	 */
	// 课程列表
	public List<Course> listCourse(Course course) {
		return courseBiz.findDayCourse(course);
	}

	// 老师
	public List<SysUser> listTeacher() {
		String comId = ComUtils.getCurrentComId();
		return courseBiz.findListTeacher(comId);
	}

	// 我的预约
	public Page<CourseEnroll> pageMyCourse() {
		CourseEnroll courseEnroll = new CourseEnroll();
		courseEnroll.setMemberId(MemberUtils.getMemberId());
		return courseEnrollBiz.findPage(courseEnroll);
	}

	// 保存评价
	@Transactional(readOnly = false)
	public void saveComment(CourseEnroll enroll) {
		CourseEnroll update = new CourseEnroll();
		update.setId(enroll.getId());
		update.setCommentLevel(enroll.getCommentLevel());
		update.setCommentContent(enroll.getCommentContent());
		update.setCommentTime(DateUtils.getNow());
		update.setStatus(CourseEnroll.status_5);
		courseEnrollBiz.update(update);
	}

	// 取消预约
	@Transactional(readOnly = false)
	public void cancelMyCourse(CourseEnroll enroll) {
		CourseEnroll update = new CourseEnroll();
		update.setId(enroll.getId());
		update.setStatus(CourseEnroll.status_2);
		courseEnrollBiz.update(update);
	}	
	// 保存预约	
	@Transactional(readOnly = false)
	public JsonVo saveCourseEnroll(CourseEnroll enroll) {
		
		//创建课程
		Course course = courseBiz.get(enroll.getCourseId());
		if(course.getIsWeek().equals(Course.isWeek_1)&& !DateUtils.format(course.getCourseDate()).equals(enroll.getCourseDate())){
			Course kc = courseEnrollBiz.getCopyKc(course.getId(), enroll.getCourseDate());
			if (kc == null) {
				kc = new Course();
				BeanUtils.copyProperties(course, kc);
				kc.setId(IdGenerate.nextId());
				kc.setParentId(course.getId());
				kc.setIsWeek(Course.isWeek_0);
				kc.setCourseDate(DateUtils.parseDate(enroll.getCourseDate()));
				courseBiz.insert(kc);
				kc.setId(kc.getId());
			}
			course = kc;
		}
		enroll.setCourseId(course.getId());
		List<CourseEnroll> list = courseEnrollBiz.findList(enroll);
		if(list.size()>=course.getPeopleMax()){
			return JsonVo.sendError("课程预约已达到上限");
		}
		enroll.setMemberId(MemberUtils.getMemberId());
		CourseEnroll courseEnroll = courseEnrollBiz.getByEntity(enroll);
		if(courseEnroll != null){
			if(
				courseEnroll.getStatus().equals(CourseEnroll.status_1) ||
				courseEnroll.getStatus().equals(CourseEnroll.status_4) ||
				courseEnroll.getStatus().equals(CourseEnroll.status_5)
				){
				return JsonVo.sendError("您已预约成功，请勿重复预约");
			}else if(CourseEnroll.status_2.equals(courseEnroll.getStatus())){
				return JsonVo.sendError("您已取消该课程预约");
			}
		}
		enroll.setStatus(CourseEnroll.status_1);
		enroll.setCreateTime(new Date());
		courseEnrollBiz.save(enroll);
		
		Member member = memberBiz.get(enroll.getMemberId());
		
		/**
		 * 老师发送预约通知
		 */
		WorkMsg workMsg = new WorkMsg();
		workMsg.setUserId(course.getTeacherId());
		workMsg.setStyle(WorkMsg.STYLE_1);
		workMsg.setBizId(course.getId());
		workMsg.setBizType(WorkMsg.BIZTYPE_1);
		workMsg.setUrl("../course/courseInfo?id="+course.getId());
		workMsg.setTitle("课程预约通知");
		String content = "课程名称: "+course.getName()+"<br/>课程时间: "+DateUtils.format(course.getCourseDate())+"<br/>详细时间: ";
		content += DateUtils.format(course.getStartTime(),"HH:mm:ss")+" - " +DateUtils.format(course.getEndTime(),"HH:mm:ss");
		content += "<br/>教师: " + course.getTeacherName();
		if(StrUtils.notBlank(course.getAssistantId())){
			content += "<br/>助师: " + course.getAssistantName();
		}
		content += "<br/>教师: " + course.getTeacherName();
		content += "<br/>预约人: " + member.getName();
		content += "<br/>预约时间: " + DateUtils.getDate();
		workMsg.setContent(content);
		workMsg.setComId(workMsg.getComId());
		workMsg.setCreateTime(new Date());
		workMsgBiz.save(workMsg);
		workMsg.setId(null);
		
		/**
		 * 助教发送预约通知
		 */
		if(StrUtils.notBlank(course.getAssistantId())){
			workMsg.setUserId(course.getAssistantId());
			workMsgBiz.save(workMsg);
			workMsg.setId(null);
		}
		
		/**
		 * 给拥有通知权限的发送预约通知
		 */
		StaffNoticeSetting where = new StaffNoticeSetting();
		where.setComId(course.getComId());
		where.setEnrollMsg(StaffNoticeSetting.TYPE_0);
		for (StaffNoticeSetting staffNoticeSetting : staffNoticeSettingBiz.findList(where)) {
			workMsg.setUserId(staffNoticeSetting.getUserId());
			workMsgBiz.save(workMsg);
			workMsg.setId(null);
		}
		
		return JsonVo.sendOk("保存成功！");
	}

	/*******************************************************
	 * 活动
	 */

	// 活动列表
	public Page<Activity> pageActity(Activity activity) {
		return activityBiz.findPage(activity);
	}
	
	// 我的活动
	public Page<Activity> pageMyActity(Activity activity) {
		return activityBiz.pageMyActity(activity);
	}

	// 活动详情
	public Activity actityInfo(String id) {
		Activity activity = activityBiz.get(id);
		FileUpload where = new FileUpload();
		where.setBizType(Activity.FILE_TYPE);
		where.setBizId(id);
		activity.setFileUpload(fileUploadBiz.findList(where));
		
		ActivityEnroll enrollWhere = new ActivityEnroll();
		enrollWhere.setActivityId(id);
		enrollWhere.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_0);
		List<ActivityEnroll> enrollList = activityEnrollBiz.findList(enrollWhere);
		activity.setEnrollList(enrollList);
		
		enrollWhere = new ActivityEnroll();
		enrollWhere.setActivityId(id);
		enrollWhere.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_4);
		List<ActivityEnroll> waitList = activityEnrollBiz.findList(enrollWhere);
		activity.setWaitList(waitList);
		
		enrollWhere = new ActivityEnroll();
		enrollWhere.setActivityId(id);
		enrollWhere.setMemberId(MemberUtils.getMemberId());
		ActivityEnroll enroll = activityEnrollBiz.getByEntity(enrollWhere);
		if(enroll != null){
			activity.setMyEnrollState("yes");
			//	0、正常 1、取消		
			activity.setEnrollState(enroll.getEnrollStatus());
		}else{
			activity.setMyEnrollState("no");
		}
		
		return activity;
	}

	// 活动报名列表
	public Page<ActivityEnroll> pageActityEnroll(ActivityEnroll activityEnroll) {
		return activityEnrollBiz.findPage(activityEnroll);
	}

	// 活动报名
	@Transactional(readOnly = false)
	public JsonVo saveActityEnroll(ActivityEnroll activityEnroll) {
		activityEnroll.setId(null);
		activityEnroll.setMemberId(MemberUtils.getMemberId());
		activityEnroll.setEnrollTime(new Date());
		return activityEnrollBiz.saveActivityEnroll(activityEnroll);
	}
	
	// 我的活动取消
	@Transactional(readOnly = false)
	public void updateCancelMyEnroll(ActivityEnroll activityEnroll) {
		activityEnroll.setMemberId(MemberUtils.getMemberId());
		activityEnrollBiz.updateEnrollStatus(activityEnroll);
	}

	/*******************************************************
	 * 会员卡
	 */
	// 会员卡
	public Page<Cards> pageCards(Cards cards) {
		return cardsBiz.findPage(cards);
	}

	// 会员卡明细
	public Cards infoCards(String id) {
		return cardsBiz.get(id);
	}

	// // 会员卡购买
	// @Transactional(readOnly = false)
	// public void buyCards(CashBuy cashBuy) {
	// cashBuy.setId(null);
	// cashBuyBiz.save(cashBuy);
	// }

	// 我的卡包
	public Page<MemberCard> pageMyCards(MemberCard card) {
		card.setMemberId(MemberUtils.getMemberId());
		return memberCardBiz.findPage(card);
	}

	// 我的会员卡详情
	public MemberCard infoMyCards(String id) {
		return memberCardBiz.get(id);
	}

	// 我的会员卡消费记录
	public Page<CardChange> pageMyCardsChange(String id) {
		CardChange where = new CardChange();
		where.setMcId(id);
		where.setComId(where.getComId());
		return cardChangeBiz.findPage(where);
	}

	/*******************************************************
	 * 相册
	 */
	// 相册
	public Page<Album> pageAlbum(Album album) {
		return albumBiz.findPage(album);
	}

	// 相册详情
	@Transactional(readOnly = false)
	public Album infoAlbum(String id) {
		Album album = albumBiz.get(id);
		FileUpload where = new FileUpload();
		where.setBizType(Album.FILE_TYPE);
		where.setBizId(id);
		album.setFileUpload(fileUploadBiz.findList(where));
		album.setClicks(album.getClicks()+1);
		albumBiz.save(album);
		return album;
	}

	// 相册图片
	public List<FileUpload> listAlbumImg(String id) {
		FileUpload where = new FileUpload();
		where.setBizId(id);
		where.setBizType(Album.FILE_TYPE);
		return fileUploadBiz.findList(where);
	}

	/*******************************************************
	 * 成长记录
	 */
	// 我的成长记录
	public Page<Growup> pageMyGrowup() {
		Growup where = new Growup();
		where.setMemberId(MemberUtils.getMemberId());
		return growupBiz.findMyPage(where);
	}

	// 保存成长记录
	@Transactional(readOnly = false)
	public void saveGrowupImg(String  id,MultipartFile files) {
		Growup growup = growupBiz.get(id);
		fileUploadBiz.uploadFile(files,id,growup.FILE_TYPE);
	}
	// 保存成长记录
	@Transactional(readOnly = false)
	public String saveGrowup(Growup growup) {
		growup.setMemberId(MemberUtils.getMemberId());
		growupBiz.save(growup);
		return  growup.getId();
	}
	// 删除成长记录
	@Transactional(readOnly = false)
	public void deletGropup(Growup growup) {
		growupBiz.delete(growup);
	}
	/*******************************************************
	 * 我的
	 */
	// 我的数据
	public Object getMemberInfo() {
		return memberBiz.getMemberInfo(MemberUtils.getMemberId());
	}

	// 修改我的数据
	@Transactional(readOnly = false)
	public void updateMember(Member member) {
		member.setId(MemberUtils.getMemberId());
		memberBiz.update(member);
	}

	// 意见反馈
	@Transactional(readOnly = false)
	public String saveFeedback(Feedback feedback) {
		feedback.setBizType(Feedback.BIZ_TYPE_1);
		feedbackBiz.save(feedback);
		return feedback.getId();
	}
	// 意见反馈上传
	@Transactional(readOnly = false)
	public void saveFeedbackImg(String id, MultipartFile files) {
		Feedback feedback = feedbackBiz.get(id);
		fileUploadBiz.uploadFile(files,id,feedback.FILE_TYPE);
	}
	//	上传头像
	@Transactional(readOnly = false)
	public void uploadMemberHead(Member member, MultipartFile files) {
		member.setId(MemberUtils.getMemberId());
		FileUploadParams params = new FileUploadParams();
		params.setFile(files);
		params.setBizId(member.getId());
		params.setBizType(member.FILE_TYPE);
		FileUpload upload =  fileUploadBiz.uploadFile(params);
		if(StrUtils.notBlank(upload)){
			member.setHeadImg(upload.getFileUrl());
			memberBiz.update(member);
		}
	}
	// 我的积分
	public Page<Points> pageMyPoints() {
		Points where = new Points();
		where.setMemberId(MemberUtils.getMemberId());
		return pointsBiz.findPage(where);
	}
	// 我的信息
	public Member infoMyData() {
		return  MemberUtils.getMember();
	}
	

}
