package com.junkj;

import java.util.List;

import javax.annotation.PostConstruct;

import org.apache.ibatis.session.SqlSessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.servlet.config.annotation.InterceptorRegistration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;

import com.jagregory.shiro.freemarker.ShiroTags;
import com.junkj.common.config.Global;
import com.junkj.common.filter.ComFilter;
import com.junkj.common.filter.MobileFilter;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.log.LogInterceptor;
import com.junkj.common.mybatis.interceptor.SqlInterceptor;
import com.junkj.common.utils.ConfigUtils;
import com.junkj.common.utils.JsonUtils;

@Configuration
public class WebConfig extends WebMvcConfigurationSupport {

	@Autowired
	private freemarker.template.Configuration configuration;
	
	/**
	 * freemarker全局变量
	 */
	@PostConstruct
	public void setConfigure() throws Exception {
		configuration.setSharedVariable("v", ConfigUtils.getSysValByKey("V"));
		configuration.setSharedVariable("isSaas", Global.isSaas().toString());
		configuration.setSharedVariable("adminPath", Global.getAdminPath());
		configuration.setSharedVariable("shiro", new ShiroTags());
		if(Global.isDev()){
			configuration.setSharedVariable("devUser", "admin");
			configuration.setSharedVariable("devPass", "admin");
		}
		
//		ApiConfig ac = new ApiConfig();
//        ac.setAppId("wxd36462528b3882d3");
//        ac.setAppSecret("843c4b6adc36368d354461e89eea4e50");
//        ApiConfigKit.putApiConfig(ac);
	}

	/**
	 * 路径转换
	 */
	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		// 文件路径映射
		// 其中upload表示访问的前缀。"file:C:/Temp/upload/"是文件真实的存储路径
		registry.addResourceHandler("/upload/**").addResourceLocations("file:" + Global.getFilePath());
		registry.addResourceHandler("/static/**").addResourceLocations("classpath:/static/");
	}

	/**
	 * 拦截
	 */
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		/**
		 * 日志拦截
		 */
		InterceptorRegistration registration = registry.addInterceptor(new LogInterceptor());
		String apps = Global.getConfig("web.interceptor.log.addPaths");
		String epps = Global.getConfig("web.interceptor.log.excludePaths");
		for (String uri : StrUtils.split(apps, ",")) {
			if (StrUtils.isNotBlank(uri)) {
				registration.addPathPatterns(StrUtils.trim(uri));
			}
		}
		for (String uri : StrUtils.split(epps, ",")) {
			if (StrUtils.isNotBlank(uri)) {
				registration.excludePathPatterns(StrUtils.trim(uri));
			}
		}
		/**
		 * 移动端
		 */
		InterceptorRegistration com = registry.addInterceptor(new ComFilter());
		String comAdd = Global.getConfig("web.interceptor.com.addPaths");
		String comExc = Global.getConfig("web.interceptor.com.excludePaths");
		for (String uri : StrUtils.split(comAdd, ",")) {
			if (StrUtils.isNotBlank(uri)) {
				com.addPathPatterns(StrUtils.trim(uri));
			}
		}
		for (String uri : StrUtils.split(comExc, ",")) {
			if (StrUtils.isNotBlank(uri)) {
				com.excludePathPatterns(StrUtils.trim(uri));
			}
		}
		/**
		 * 移动端
		 */
		InterceptorRegistration mobile = registry.addInterceptor(new MobileFilter());
		String mobileAdd = Global.getConfig("web.interceptor.mobile.addPaths");
		String mobileExc = Global.getConfig("web.interceptor.mobile.excludePaths");
		for (String uri : StrUtils.split(mobileAdd, ",")) {
			if (StrUtils.isNotBlank(uri)) {
				mobile.addPathPatterns(StrUtils.trim(uri));
			}
		}
		for (String uri : StrUtils.split(mobileExc, ",")) {
			if (StrUtils.isNotBlank(uri)) {
				mobile.excludePathPatterns(StrUtils.trim(uri));
			}
		}
	}

	/**
	 * sql拦截
	 */
	@Bean
	public String myInterceptor(SqlSessionFactory sqlSessionFactory) {
		sqlSessionFactory.getConfiguration().addInterceptor(new SqlInterceptor());
		return "interceptor";
	}

	/**
	 * 设置Json式转换器
	 */
	@Bean
	public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {
		MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
		converter.setObjectMapper(JsonUtils.getMapper());
		return converter;
	}

	/**
	 * 添加转换器
	 */
	@Override
	public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
		converters.add(jackson2HttpMessageConverter());
	}

}