package com.junkj.module.sys.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.junkj.common.action.BaseAction;
import com.junkj.common.entity.Page;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.UserUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.sys.biz.SysMenuBiz;
import com.junkj.module.sys.biz.SysRoleBiz;
import com.junkj.module.sys.entity.SysRole;

/**
 * 系统角色action
 * 
 * @copyright © 2016 大连骏骁网络科技有限公司
 * @author 骏骁(cxmail@qq.com)
 * @createDate 2019-08-25
 * @version: 1.0.0
 */
@Controller
@RequestMapping(value = "${adminPath}/sysRole")
public class SysRoleAction extends BaseAction {

	@Autowired
	private SysRoleBiz sysRoleBiz;
	@Autowired
	private SysMenuBiz sysMenuBiz;

	@GetMapping("")
	public String index(HttpServletRequest request) {
		request.setAttribute("isAdmin", UserUtils.getUser().isAdmin());
		return "/module/sys/sysRole";
	}

	/**
	 * 查询可设置的菜单树
	 */
	@RequestMapping(value = "/findSetMenu", method = RequestMethod.POST)
	@ResponseBody
	public Object findSetMenu() {
		return sysMenuBiz.findSetMenu();
	}
	
	/**
	 * 角色菜单设置
	 */
	@RequestMapping(value = "/updateRoleMenu", method = RequestMethod.POST)
	@ResponseBody
	public JsonVo updateRoleMenu(@RequestParam String roleId, @RequestParam String menus) {
		SysRole role = new SysRole();
		role.setId(roleId);
		role.setMenus(menus);
		sysRoleBiz.update(role);
		return sendOk();
	}

	/**
	 * 分页条件查询
	 */
	@PostMapping("/listPage")
	@ResponseBody
	public Page<SysRole> listPage(SysRole sysRole) {
		Page<SysRole> page = sysRoleBiz.findPage(sysRole);
		return page;
	}

	/**
	 * 列表查询
	 */
	@PostMapping("/listData")
	@ResponseBody
	public List<SysRole> listData(SysRole sysRole) {
		List<SysRole> list = sysRoleBiz.findList(sysRole);
		return list;
	}

	/**
	 * 状态设置
	 */
	@RequestMapping("/updateStatus")
	@ResponseBody
	public JsonVo updateStatus(SysRole sysRole) {
		if (!sysRole.getCurrentUser().isAdmin() && SysRole.IS_SYS_YES.equals(sysRole.getIsSys())){
			return sendError("越权操作，只有超级管理员才能修改系统角色！");
		}
		sysRoleBiz.updateStatus(sysRole);
		return sendOk();
	}

	/**
	 * 删除
	 */
	@PostMapping("/delete")
	@ResponseBody
	public JsonVo deleteSysRole(SysRole sysRole) {
		if (!sysRole.getCurrentUser().isAdmin() && SysRole.IS_SYS_YES.equals(sysRole.getIsSys())){
			return sendError("越权操作，只有超级管理员才能删除系统角色！");
		}
		int num = sysRoleBiz.countUsers(sysRole.getId());
		if (num > 0) {
			return JsonVo.sendError("该角色已被使用,无法删除！");
		}
		sysRole.setIsDeleteDB(true);
		sysRoleBiz.delete(sysRole);
		return sendOk();
	}

	/**
	 * 添加或更新
	 */
	@PostMapping("/save")
	@ResponseBody
	public JsonVo save(SysRole sysRole) {
		if (!sysRole.getCurrentUser().isAdmin() && SysRole.IS_SYS_YES.equals(sysRole.getIsSys())){
			return sendError("越权操作，只有超级管理员才能保存系统角色！");
		}
		// 编码验证
		SysRole where = new SysRole();
		where.setId(sysRole.getId());
		where.disableComId();
		SysRole old = sysRoleBiz.getByEntity(where);
		if (StrUtils.notBlank(old)) {
			if (sysRole.getIsNewT()) {
				return sendError("角色编码已存在");
			} else if (!old.getId().equals(sysRole.getId())) {
				return sendError("角色编码已存在");
			}
		}
		sysRoleBiz.save(sysRole);
		return sendOk();
	}

}