package com.junkj.common.utils;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.session.Session;

import com.junkj.common.action.http.ServletUtils;
import com.junkj.common.config.Global;
import com.junkj.common.exception.SpringUtils;
import com.junkj.common.lang.ObjectUtils;
import com.junkj.common.lang.StrUtils;
import com.junkj.module.sys.biz.SysCompanyBiz;
import com.junkj.module.sys.entity.SysCompany;

public class ComUtils {

	private static SysCompanyBiz sysCompanyBiz = SpringUtils.getBean(SysCompanyBiz.class);

	public static final String DEFAULT_COM_NAME = "junkj";
	public static final String DEFAULT_COM_ID = "0";
	public static final String CACHE_COM_ID_ = "COM_ID_";
	public static final String CACHE_COM_NAME_ = "COM_NAME_";

	/**
	 * 根据ID获取公司
	 */
	public static SysCompany get(String id) {
		SysCompany company = (SysCompany) CacheUtils.get(CacheUtils.COM_CACHE, CACHE_COM_ID_ + id);
		if (company == null) {
			company = sysCompanyBiz.get(id);
			if (company == null) {
				return null;
			}
			CacheUtils.put(CacheUtils.USER_CACHE, CACHE_COM_ID_ + id, company);
		}
		return company;
	}

	/**
	 * 通过request、session获取公司名称
	 */
	public static String getCurrentComName() {
		String name = null;
		if (Global.isSaas()) {
			HttpServletRequest request = ServletUtils.getRequest();
			Session session = UserUtils.getSubject().getSession(false);

			if (request != null) {
				name = ObjectUtils.toString(request.getAttribute(CACHE_COM_NAME_));
			} else {
				name = "";
			}

			if (StrUtils.isBlank(name) && session != null) {
				name = ObjectUtils.toString(session.getAttribute(CACHE_COM_NAME_));
			}

			if (StrUtils.isBlank(name)) {
				name = DEFAULT_COM_NAME;
			}
			if (request != null) {
				request.setAttribute(CACHE_COM_NAME_, name);
			}
		}
		return ObjectUtils.toStringIgnoreNull(name);
	}

	/**
	 * 通过request、session获取公司id
	 */
	public static String getCurrentComId() {
		String id = null;
		if (Global.isSaas()) {
			HttpServletRequest request = ServletUtils.getRequest();
			Session session = UserUtils.getSubject().getSession(false);

			if (request != null) {
				id = ObjectUtils.toString(request.getAttribute(CACHE_COM_ID_));
			} else {
				id = "";
			}

			if (StrUtils.isBlank(id) && session != null) {
				id = ObjectUtils.toString(session.getAttribute(CACHE_COM_ID_));
			}
			if (StrUtils.isBlank(id)) {
				id = DEFAULT_COM_ID;
			}
			if (request != null) {
				request.setAttribute(CACHE_COM_ID_, id);
			}
		}
		return ObjectUtils.toStringIgnoreNull(id);
	}

	/**
	 * 获取企业配置缓存
	 */
	@SuppressWarnings("unchecked")
	public static <V> V getCache(String key) {
		key = new StringBuilder(key).append("__").append(getCurrentComId()).toString();
		return (V) CacheUtils.get(CacheUtils.COM_CACHE, key);
	}

	/**
	 * 获取企业配置缓存
	 */
	public static <V> V getCache(String key, V defaultValue) {
		V a = getCache(key);
		if (a != null) {
			return a;
		}
		return defaultValue;
	}

	/**
	 * 更新企业配置缓存
	 */
	public static <V> void putCache(String key, V value) {
		CacheUtils.put(CacheUtils.COM_CACHE, new StringBuilder(key).append("__").append(getCurrentComId()).toString(),
				value);
	}

	/**
	 * 删除企业配置缓存
	 */
	public static void removeCache(String key) {
		CacheUtils.remove(CacheUtils.COM_CACHE, new StringBuilder(key).append("__").toString());
	}

}