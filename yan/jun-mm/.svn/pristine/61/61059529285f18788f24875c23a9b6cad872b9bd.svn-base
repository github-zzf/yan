package com.junkj.common.filter;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.junkj.common.config.Global;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.ComUtils;
import com.junkj.common.utils.JsonUtils;
import com.junkj.common.utils.MemberUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.sys.entity.SysCompany;
import com.junkj.module.weixin.biz.WxUserBiz;
import com.junkj.module.weixin.entity.WxUser;

@WebFilter(urlPatterns = "/m/*", filterName = "CORSFilter")
public class MemberFilter implements Filter {

	protected Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	private WxUserBiz wxUserBiz;

	@Override
	public void destroy() {
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws ServletException, IOException {
		HttpServletRequest req = (HttpServletRequest) request;
		HttpServletResponse resp = (HttpServletResponse) response;

		resp.setHeader("Access-Control-Allow-Origin", req.getHeader("Origin"));// 不能为*，*代表接受所有域名访问，如写*则下面一行代码无效。
		resp.setHeader("Access-Control-Allow-Headers", "content-type,token");// 不能为*
		resp.setHeader("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
		resp.setHeader("Access-Control-Allow-Credentials", "true");// 前三行解决跨域，这一句行是携带证书(关键)

		JsonVo error = null;

		String origin = req.getHeader("Origin");
		// 域名验证
		if (!Global.isDev() && !origin.endsWith(Global.mobileUri())) {
			error = JsonVo.sendError("授权认证没有通过!非法域名");
		}
		if (error == null) {
			// 企业编码验证
			String comId = origin.split("//")[1].split("\\.")[0];
			SysCompany company = ComUtils.get(comId);
			if (company != null) {
				req.setAttribute(ComUtils.CACHE_COM_ID_, comId);
			} else {
				error = JsonVo.sendError("授权认证没有通过!非法域名");
			}
		}

		if (error == null) {
			// 用户验证
			String token = req.getHeader("token");
			if(Global.isDev()){
				token = "30798bebfecc48518dccfe99982de389";
			}
			System.out.println("token===========:" + token);
			if (StrUtils.notBlank(token)) {
				WxUser user = wxUserBiz.getByTokenId(token);
				if (user != null) {
					req.setAttribute(MemberUtils.CACHE_MEMBER_ID_, user.getMemberId());
					req.setAttribute(MemberUtils.CACHE_STAFF_ID_, user.getStaffId());
					req.setAttribute(MemberUtils.CACHE_SALE_ID_, user.getSaleId());
				} else {
					error = JsonVo.sendError("授权认证没有通过!无效用户");
				}
			} else {
				error = JsonVo.sendError("授权认证没有通过!无效用户");
			}
		}

		if (error != null) {
			PrintWriter writer = null;
			OutputStreamWriter osw = null;
			try {
				resp.setContentType("application/json;charset=utf-8");
				osw = new OutputStreamWriter(resp.getOutputStream(), "UTF-8");
				writer = new PrintWriter(osw, true);
				String jsonStr = JsonUtils.toString(error);
				System.out.println("过滤器结果===========:" + jsonStr);
				writer.write(jsonStr);
				writer.flush();
				writer.close();
				osw.close();
			} catch (UnsupportedEncodingException e) {
				logger.error("过滤器返回信息失败:" + e.getMessage(), e);
			} catch (IOException e) {
				logger.error("过滤器返回信息失败:" + e.getMessage(), e);
			} finally {
				if (null != writer) {
					writer.close();
				}
				if (null != osw) {
					osw.close();
				}
			}
			return;
		}

		logger.info("token filter过滤ok!");
		chain.doFilter(req, resp);
	}

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
	}

}