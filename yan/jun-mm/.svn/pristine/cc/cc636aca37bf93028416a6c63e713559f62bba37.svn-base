package com.junkj.module.web.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.HtmlUtils;

import com.jfinal.kit.HashKit;
import com.jfinal.kit.HttpKit;
import com.jfinal.weixin.sdk.api.ApiConfig;
import com.jfinal.weixin.sdk.api.ApiConfigKit;
import com.jfinal.weixin.sdk.api.ApiResult;
import com.jfinal.weixin.sdk.api.JsTicket;
import com.jfinal.weixin.sdk.api.JsTicketApi;
import com.jfinal.weixin.sdk.api.PaymentApi;
import com.jfinal.weixin.sdk.api.SnsAccessToken;
import com.jfinal.weixin.sdk.api.SnsAccessTokenApi;
import com.jfinal.weixin.sdk.api.SnsApi;
import com.jfinal.weixin.sdk.kit.PaymentKit;
import com.junkj.common.IdGen.IdGenerate;
import com.junkj.common.action.BaseAction;
import com.junkj.common.config.Global;
import com.junkj.common.lang.DateUtils;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.ComUtils;
import com.junkj.common.utils.IpUtils;
import com.junkj.common.utils.JsonUtils;
import com.junkj.common.utils.MemberUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.file.utils.FileUploadUtils;
import com.junkj.module.weixin.biz.WxUserBiz;
import com.junkj.module.weixin.entity.WxConfig;
import com.junkj.module.weixin.entity.WxUser;
import com.vdurmont.emoji.EmojiParser;

@Controller
@RequestMapping(value = "${mobilePath}/wx")
public class WeiXinAction extends BaseAction {

	/**
	 * 活动
	 */
	private static final String PAY_ACTIVITY = "activity";
	/**
	 * 会员卡
	 */
	private static final String PAY_CARDS = "cards";
	@Autowired
	private WxUserBiz wxUserBiz;

	@RequestMapping(value = "getUserInfo", method = RequestMethod.GET)
	@ResponseBody
	public Object getUserInfo(HttpServletRequest request, String code, String state) {

		if (Global.isDev()) {
			String tokenId = "6591678774924d7a989f631eb8c86638";
			WxUser user = wxUserBiz.getByTokenId(tokenId);
			if ("staff".equals(state) && StrUtils.isBlank(user.getStaffId())) {
				// 未登录
				return sendError(2, tokenId);
			} else if ("sale".equals(state) && StrUtils.isBlank(user.getSaleId())) {
				// 未登录
				return sendError(2, tokenId);
			}
			return sendData(tokenId);
		}

		WxConfig c = ComUtils.getWxConfig();
		String appid = c.getAppid();
		String appsecret = c.getAppsecret();

		// 获取token
		SnsAccessToken token = SnsAccessTokenApi.getSnsAccessToken(appid, appsecret, code);
		if (token.getErrorCode() == null) {
			String openid = token.getOpenid();
			String tokenId = IdGenerate.uuid();
			WxUser user = wxUserBiz.get(openid);
			if (user == null) {
				// 获取用户信息
				ApiResult apiResult = SnsApi.getUserInfo(token.getAccessToken(), token.getOpenid());
				if (apiResult.isSucceed()) {
					user = JsonUtils.toObject(apiResult.getJson(), WxUser.class);
					user.setAppid(appid);
					user.setTokenId(tokenId);
					user.setTokenTime(DateUtils.getNow());
					user.setNickname(EmojiParser.parseToAliases(user.getNickname()));
					user.setCreateTime(DateUtils.getNow());
					user.setUpdateTime(user.getCreateTime());
					wxUserBiz.insert(user);
					final String headimgurl = user.getHeadimgurl();
					if (StrUtils.notBlank(headimgurl)) {
						new Thread() {
							public void run() {
								try {
									String headImg = FileUploadUtils.downloadImg(headimgurl);
									WxUser update = new WxUser();
									update.setAppid(appid);
									update.setHeadImg(headImg);
									wxUserBiz.update(update);
								} catch (Exception e) {
									logger.error("获取微信用户头像失败", e);
								}
							}
						}.start();
					}
				}
			} else {
				user.setTokenId(tokenId);
				user.setTokenTime(DateUtils.getNow());
				wxUserBiz.update(user);
			}
			if (user != null) {
				if ("staff".equals(state) && StrUtils.isBlank(user.getStaffId())) {
					// 未登录
					return sendError(2, tokenId);
				} else if ("sale".equals(state) && StrUtils.isBlank(user.getSaleId())) {
					// 未登录
					return sendError(2, tokenId);
				}
				return sendData(tokenId);
			}
		}
		return sendError(token.getErrorMsg());
	}

	/**
	 * 支付=-/
	 */
	@RequestMapping(value = "/pay", method = RequestMethod.GET)
	@ResponseBody
	@SuppressWarnings("unchecked")
	public Object wxPay(HttpServletRequest request, HttpServletResponse response, String url, String data)
			throws IOException {
		data = HtmlUtils.htmlUnescape(data);
		Map<String, Object> map = JsonUtils.toObject(data, Map.class);
		if (PAY_ACTIVITY.equals(map.get("type"))) {

		} else if (PAY_CARDS.equals(map.get("type"))) {

		}
		return pay(request, response, url, data);
	}

	/**
	 * ****************************************************** 商品购买
	 */
	public JsonVo pay(HttpServletRequest request, HttpServletResponse response, String url, String data) {
		String payCode = IdGenerate.uuid();

		WxConfig c = ComUtils.getWxConfig();

		// 微信支付
		String openid = MemberUtils.getOpenid();
		// 订单金额
		Double total_fee = 100D;
		// appid
		String appid = c.getAppid();
		// appsecret
		String appsecret = c.getAppsecret();
		// 商户号
		String mchId = c.getMchId();
		// 回调地址
		String webPath = "http://cxmail8.vicp.cc/m/wx/pay_back";
		// 订单描述
		String body = "商城支付订单";

		Map<String, String> params = new HashMap<String, String>();
		params.put("appid", appid);
		params.put("mch_id", mchId);
		params.put("body", body);
		params.put("out_trade_no", payCode);
		params.put("total_fee", total_fee.intValue() + "");
		params.put("spbill_create_ip", IpUtils.getRealIp(request));
		params.put("trade_type", PaymentApi.TradeType.JSAPI.name());
		params.put("nonce_str", System.currentTimeMillis() / 1000 + "");
		params.put("notify_url", webPath);
		params.put("openid", openid);

		String sign = PaymentKit.createSign(params, c.getMchKey());
		params.put("sign", sign);
		String xmlResult = PaymentApi.pushOrder(params);

		Map<String, String> result = PaymentKit.xmlToMap(xmlResult);

		String return_code = result.get("return_code");
		if (StrUtils.isBlank(return_code) || !"SUCCESS".equals(return_code)) {
			String return_msg = result.get("return_msg");
			return sendError(return_msg);
		}
		String result_code = result.get("result_code");
		if (StrUtils.isBlank(result_code) || !"SUCCESS".equals(result_code)) {
			String err_code_des = result.get("err_code_des");
			return sendError(err_code_des);
		}

		// 以下字段在return_code 和result_code都为SUCCESS的时候有返回
		String prepay_id = result.get("prepay_id");

		String timeStamp = System.currentTimeMillis() / 1000 + "";
		String nonceStr = System.currentTimeMillis() + "";

		Map<String, String> packageParams = new HashMap<String, String>();
		packageParams.put("appId", appid);
		packageParams.put("timeStamp", timeStamp);
		packageParams.put("nonceStr", nonceStr);
		packageParams.put("package", "prepay_id=" + prepay_id);
		packageParams.put("signType", "MD5");
		String paySign = PaymentKit.createSign(packageParams, c.getMchKey());

		String signature = getSignature(appid, appsecret, url, nonceStr, timeStamp);

		packageParams.put("paySign", paySign);
		packageParams.put("signature", signature);

		return sendData(packageParams);
	}

	// wx.config 签名
	public String getSignature(String appId, String appsecret, String url, String noncestr, String timeStamp) {
		ApiConfig ac = new ApiConfig();
		ac.setAppId(appId);
		ac.setAppSecret(appsecret);
		ApiConfigKit.putApiConfig(ac);

		ApiConfigKit.setThreadLocalAppId(appId);
		String _wxJsApiTicket = "";
		try {
			JsTicket jsTicket = JsTicketApi.getTicket(JsTicketApi.JsApiType.jsapi);
			_wxJsApiTicket = jsTicket.getTicket();
		} finally {
			ApiConfigKit.removeThreadLocalAppId();
		}

		Map<String, String> _wxMap = new TreeMap<String, String>();
		_wxMap.put("noncestr", noncestr);
		_wxMap.put("timestamp", timeStamp);
		_wxMap.put("jsapi_ticket", _wxJsApiTicket);
		_wxMap.put("url", url);
		// 加密获取signature
		StringBuilder _wxBaseString = new StringBuilder();
		for (Entry<String, String> param : _wxMap.entrySet()) {
			_wxBaseString.append(param.getKey()).append("=").append(param.getValue()).append("&");
		}
		String _wxSignString = _wxBaseString.substring(0, _wxBaseString.length() - 1);
		return HashKit.sha1(_wxSignString);

	}

	// 商品支付成功通知
	@RequestMapping(value = "/payBack/{type}", method = RequestMethod.POST)
	public void pay_goods_back(HttpServletRequest request, HttpServletResponse response, @PathVariable String type)
			throws IOException {
		System.out.println("[pay_back]===================");

		// 支付结果通用通知文档:
		// https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_7
		String xmlMsg = HttpKit.readData(request);

		Map<String, String> params = PaymentKit.xmlToMap(xmlMsg);

		String result_code = params.get("result_code");
		// 微信订单号
		String payId = params.get("transaction_id");
		// 商户订单号
		String payCode = params.get("out_trade_no");

		// 注意重复通知的情况，同一订单号可能收到多次通知，请注意一定先判断订单状态
		// 避免已经成功、关闭、退款的订单被再次更新

		WxConfig c = ComUtils.getWxConfig();
		String partnerkey = c.getMchKey();

		PrintWriter out = response.getWriter();
		if (PaymentKit.verifyNotify(params, partnerkey)) {
			if (("SUCCESS").equals(result_code)) {
				// 支付回调处理
				if (PAY_ACTIVITY.equals(type)) {

				} else if (PAY_CARDS.equals(type)) {

				}

				Map<String, String> xml = new HashMap<String, String>();
				xml.put("return_code", "SUCCESS");
				xml.put("return_msg", "OK");
				out.print(PaymentKit.toXml(xml));
				out.close();
				return;
			}
		}
		out.print("");
		out.close();
	}

}
