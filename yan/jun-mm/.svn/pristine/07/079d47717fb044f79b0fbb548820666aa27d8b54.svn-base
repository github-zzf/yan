package com.junkj.module.company.biz;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.junkj.common.biz.CrudBiz;
import com.junkj.common.collect.ListUtils;
import com.junkj.common.entity.Page;
import com.junkj.common.lang.DateUtils;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.TplMsgUtils;
import com.junkj.common.utils.UserUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.company.dao.ActivityEnrollDao;
import com.junkj.module.company.entity.Activity;
import com.junkj.module.company.entity.ActivityEnroll;
import com.junkj.module.company.entity.Cards;
import com.junkj.module.company.entity.ComConfig;
import com.junkj.module.member.biz.CardChangeBiz;
import com.junkj.module.member.biz.MemberBiz;
import com.junkj.module.member.biz.MemberCardBiz;
import com.junkj.module.member.biz.PointsBiz;
import com.junkj.module.member.entity.CardChange;
import com.junkj.module.member.entity.Member;
import com.junkj.module.member.entity.MemberCard;
import com.junkj.module.member.entity.Points;
import com.junkj.module.sys.dao.SysPayDao;
import com.junkj.module.sys.entity.SysPay;

/**
 * 活动报名biz
 * 
 * @copyright 大连骏骁网络科技有限公司
 * @author 骏骁(cxmail@qq.com)
 * @createDate 2019年09月26日
 * @version: 1.0.0
 */
@Service
@Transactional(readOnly = true)
public class ActivityEnrollBiz extends CrudBiz<ActivityEnrollDao, ActivityEnroll> {

	@Autowired
	private ActivityEnrollDao activityEnrollDao;
	@Autowired
	private ActivityBiz activityBiz;
	@Autowired
	private CardChangeBiz cardChangeBiz;
	@Autowired
	private MemberCardBiz cardBiz;
	@Resource
	private SysPayDao sysPayDao;
	@Autowired
	private MemberBiz memberBiz;
	@Autowired
	private PointsBiz pointsBiz;
	@Autowired
	private ComConfigBiz comConfigBiz;

	/**
	 * 分页数据
	 */
	@Override
	public Page<ActivityEnroll> findPage(ActivityEnroll activityEnroll) {
		return super.findPage(activityEnroll);
	}

	/**
	 * 列表数据
	 */
	@Override
	public List<ActivityEnroll> findList(ActivityEnroll activityEnroll) {
		return super.findList(activityEnroll);
	}

	/**
	 * 添加或更新
	 */
	@Override
	@Transactional(readOnly = false)
	public void save(ActivityEnroll activityEnroll) {
		super.save(activityEnroll);
	}

	/**
	 * 添加
	 */
	@Transactional(readOnly = false)
	public JsonVo saveActivityEnroll(ActivityEnroll activityEnroll) {

		// 获取活动
		Activity activity = activityBiz.get(activityEnroll.getActivityId());

		if (activityEnroll.getIsNewT()) {
			activityEnroll.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_0);
		}

		ActivityEnroll activityEnroll1 = this.activityByMember(activityEnroll.getActivityId(),
				activityEnroll.getMemberId());
		if (activityEnroll1 != null) {
			return JsonVo.sendError("您已报名，不能重复预约");
		}
		String mcId = null;
		if (StrUtils.notBlank(activity.getCardsTypeId())) {
			MemberCard cardWhere = new MemberCard();
			cardWhere.setCardsTypeId(activity.getCardsTypeId());
			cardWhere.setMemberId(activityEnroll.getMemberId());
			// 查询会员会员卡
			List<MemberCard> cardList = cardBiz.getMemberCardList(cardWhere);
			if (cardList.size() > 0) {
				for (MemberCard mCard : cardList) {
					// 判断余额
					if (mCard.getStoredNum() < activity.getCardNum()) {
						continue;
					}
					mcId = mCard.getId();
				}
				if (mcId == null) {
					return JsonVo.sendError("会员卡余额不足!");
				}
			} else {
				return JsonVo.sendError("没有满足条件的会员卡!");
			}
		}
		if (activityEnroll.getIsNewT()) {
			Double renNum = this.findUpperLimit(activityEnroll.getActivityId());
			if (activity.getPeopleMax() <= renNum) {
				activityEnroll.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_4);
				ActivityEnroll enrollWhere = new ActivityEnroll();
				enrollWhere.setActivityId(activity.getId());
				enrollWhere.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_4);
				List<ActivityEnroll> enrollList = this.findList(enrollWhere);
				activityEnroll.setWaitNum(Long.valueOf((enrollList.size() + 1) + ""));
			}
		}
		super.save(activityEnroll);
		Member member = memberBiz.get(activityEnroll.getMemberId());
		// 会员报名通知
		new Thread() {
			public void run() {
				try {
					List<String> data = ListUtils.newArrayList();
					data.add("您有一条预约活动通知!");
					data.add("活动名称:"+activity.getName()+"\n活动开始时间:"+DateUtils.formatDate(activity.getStartTime(), "yyyy-MM-dd HH:mm:ss")+"\n活动结束时间:"+DateUtils.formatDate(activity.getEndTime(), "yyyy-MM-dd HH:mm:ss"));
					data.add(DateUtils.getDateTime());
					data.add("点击查看详情");
					TplMsgUtils.sendMsg(member.getOpenId(), "", TplMsgUtils.TPL_3, data);
				} catch (Exception e) {
					logger.error("预约通知失败", e);
				}
			}
		}.start();
		return JsonVo.sendOk("保存成功！");
	}

	/**
	 * 验证
	 */
	@Transactional(readOnly = false)
	public JsonVo activityEnrollCheck(ActivityEnroll activityEnroll) {
		// 获取活动
		Activity activity = activityBiz.get(activityEnroll.getActivityId());
		ActivityEnroll old = this.activityByMember(activityEnroll.getActivityId(), activityEnroll.getMemberId());
		if (old != null) {
			return JsonVo.sendError(2, "您已报名，不能重复报名");
		}
		String mcId = null;
		if (StrUtils.notBlank(activity.getCardsTypeId())) {
			MemberCard cardWhere = new MemberCard();
			cardWhere.setCardsTypeId(activity.getCardsTypeId());
			cardWhere.setMemberId(activityEnroll.getMemberId());
			// 查询会员会员卡
			List<MemberCard> cardList = cardBiz.getMemberCardList(cardWhere);
			if (cardList.size() > 0) {
				for (MemberCard mCard : cardList) {
					// 判断余额
					if (mCard.getStoredNum() < activity.getCardNum()) {
						continue;
					}
					mcId = mCard.getId();
				}
				if (mcId == null) {
					return JsonVo.sendError(2, "会员卡余额不足!");
				}
			} else {
				return JsonVo.sendError(2, "没有满足条件的会员卡!");
			}
		}
		return JsonVo.sendOk();
	}

	/**
	 * 取消
	 */
	@Transactional(readOnly = false)
	public void updateEnrollStatus(ActivityEnroll activityEnroll) {
		activityEnroll = dao.getByEntity(activityEnroll);
		activityEnroll.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_1);
		super.update(activityEnroll);
		ActivityEnroll enrollWhere = new ActivityEnroll();
		enrollWhere.setActivityId(activityEnroll.getActivityId());
		enrollWhere.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_4);
		List<ActivityEnroll> enrollList = super.findList(enrollWhere);
		ActivityEnroll updateActivityEnroll = new ActivityEnroll();
		for (int i = 0; i < enrollList.size(); i++) {
			if (i == 0) {
				dao.updateActivityEnroll(enrollList.get(i).getId());
			} else {
				updateActivityEnroll = enrollList.get(i);
				updateActivityEnroll.setWaitNum(updateActivityEnroll.getWaitNum() - 1);
			}
			super.update(updateActivityEnroll);
		}
		Member member = memberBiz.get(activityEnroll.getMemberId());
		Activity activity = activityBiz.get(activityEnroll.getActivityId());
		// 取消预约通知
		new Thread() {
			public void run() {
				try {
					List<String> data = ListUtils.newArrayList();
					data.add("您有一条取消活动预约通知!");
					data.add(DateUtils.formatDate(activity.getStartTime(), "yyyy-MM-dd HH:mm:ss")+"-"+DateUtils.formatDate(activity.getEndTime(), "yyyy-MM-dd HH:mm:ss"));
					data.add("");
					data.add(activity.getName());
					data.add("点击查看详情");
					TplMsgUtils.sendMsg(member.getOpenId(), "", TplMsgUtils.TPL_4, data);

				} catch (Exception e) {
					logger.error("取消活动通知失败", e);
				}
			}
		}.start();
	}

	/**
	 * 签到
	 */
	@Transactional(readOnly = false)
	public void qiandao(ActivityEnroll activityEnroll, MemberCard mc) {
		Member member = memberBiz.get(activityEnroll.getMemberId());
		// 活动签到积分
		ComConfig where = new ComConfig();
		where.setConfigKey("sign_send_points");
		where.setComId(UserUtils.getUser().getComId());
		ComConfig comConfig = comConfigBiz.getByEntity(where);
		if (comConfig != null && !"0".equals(comConfig.getConfigValue())) {
			member.setPoints(member.getPoints() + Long.valueOf(comConfig.getConfigValue()));
			memberBiz.save(member);

			// 积分记录
			Points points = new Points();
			points.setMemberId(activityEnroll.getMemberId());
			points.setBizId(activityEnroll.getId());
			points.setType(Points.TYPE_1);
			points.setBizType(Points.BIZTYPE_3);
			points.setNum(Long.valueOf(comConfig.getConfigValue()));
			pointsBiz.save(points);
		}

		// 改变签到状态
		activityEnroll.setIsSign(ActivityEnroll.isSign_1);
		activityEnroll.setSignTime(new Date());
		super.update(activityEnroll);

		// 课程有会员卡减少卡余额
		Activity activity = activityBiz.get(activityEnroll.getActivityId());
		if (StrUtils.notBlank(activity.getCardsTypeId()) && StrUtils.notBlank(mc)) {
			// 添加变更记录
			CardChange cardChange = new CardChange();
			cardChange.setMcId(mc.getId());
			cardChange.setMemberId(mc.getMemberId());
			cardChange.setType(CardChange.TYPE_1);
			cardChange.setStoredNum(activity.getCardNum());
			cardChange.setStoredNew(mc.getStoredNum());
			cardChangeBiz.xiaoFei(cardChange);
		}
		


		// 签到通知
		if(StrUtils.notBlank(member.getOpenId())){
			new Thread() {
				public void run() {
					try {
						String k3 = "活动签到成功";
						if(StrUtils.notBlank(mc)){
							if(Cards.CARDS_TYPE_1.equals( mc.getCardsType())){
								k3 = "消费" + activity.getCardNum() + "元  剩余" + (mc.getStoredNum() - activity.getCardNum()) + "元";
							}else if(Cards.CARDS_TYPE_2.equals( mc.getCardsType())){
								k3 = "消费" + activity.getCardNum() + "次  剩余" + (mc.getStoredNum() - activity.getCardNum()) + "次";
							}
						}
						
						List<String> data = ListUtils.newArrayList();
						data.add("签到成功");
						data.add(member.getName());
						data.add(DateUtils.getDateTime());
						data.add(k3);
						data.add("签到活动：" + activity.getName());
						TplMsgUtils.sendMsg(member.getOpenId(), "", TplMsgUtils.TPL_5, data);
	
					} catch (Exception e) {
						logger.error("签到通知失败", e);
					}
				}
			}.start();
		}
	}

	/**
	 * 查询是否重复预约
	 */
	public ActivityEnroll activityByMember(String activityId, String memberId) {
		return activityEnrollDao.getByMember(activityId, memberId);
	}

	/**
	 * 查询人数上限
	 */
	public Double findUpperLimit(String activityId) {
		return activityEnrollDao.findUpperLimit(activityId);
	}
	
	/**
	 * 修改等位
	 */
	public void updateActivityEnroll(String id) {
		activityEnrollDao.updateActivityEnroll(id);
	}

	/**
	 * 活动支付回调
	 * 
	 * @param payCode
	 */
	@Transactional(readOnly = false)
	public void payBack(String payCode) {
		SysPay where = new SysPay();
		where.setPayCode(payCode);
		SysPay pay = sysPayDao.getByEntity(where);
		pay.setPayStatus(SysPay.PAY_STATUS_2);
		pay.setPayTime(new Date());
		sysPayDao.update(pay);
		// 添加活动报名
		ActivityEnroll enroll = new ActivityEnroll();
		enroll.setActivityId(pay.getBizId());
		enroll.setMemberId(pay.getMemberId());
		enroll.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_0);
		enroll.setEnrollTime(pay.getPayTime());
		// 已支付
		enroll.setPayState(ActivityEnroll.PAY_STATE_2);

		Activity activity = activityBiz.get(pay.getBizId());
		Double renNum = this.findUpperLimit(activity.getId());
		if (activity.getPeopleMax() <= renNum) {
			enroll.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_4);
			ActivityEnroll enrollWhere = new ActivityEnroll();
			enrollWhere.setActivityId(activity.getId());
			enrollWhere.setEnrollStatus(ActivityEnroll.ENROLLSTATUS_4);
			List<ActivityEnroll> enrollList = this.findList(enrollWhere);
			enroll.setWaitNum(Long.valueOf((enrollList.size() + 1) + ""));
		}
		super.save(enroll);

	}

}
