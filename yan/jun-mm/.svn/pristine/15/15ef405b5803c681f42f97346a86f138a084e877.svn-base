package com.junkj.module.web.biz;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.junkj.common.lang.DateUtils;
import com.junkj.common.lang.StrUtils;
import com.junkj.common.utils.MemberUtils;
import com.junkj.module.cms.biz.ArticlesBiz;
import com.junkj.module.company.biz.CourseBiz;
import com.junkj.module.company.biz.CourseEnrollBiz;
import com.junkj.module.company.biz.LeaveBiz;
import com.junkj.module.company.biz.StaffNoticeSettingBiz;
import com.junkj.module.company.biz.WorkMsgBiz;
import com.junkj.module.company.entity.Course;
import com.junkj.module.company.entity.CourseEnroll;
import com.junkj.module.company.entity.Leave;
import com.junkj.module.company.entity.StaffNoticeSetting;
import com.junkj.module.company.entity.WorkMsg;
import com.junkj.module.statistics.dao.StatisticsDao;
import com.junkj.module.sys.biz.SysUserBiz;
import com.junkj.module.sys.entity.SysUser;

/**
 * 员工端biz
 * 
 * @copyright 大连骏骁网络科技有限公司
 * @author 骏骁(cxmail@qq.com)
 * @createDate 2019年10月19日
 * @version: 1.0.0
 */
@Service
@Transactional(readOnly = true)
public class StaffApiBiz {
	
	@Autowired
	private CourseBiz courseBiz;
	@Autowired
	private CourseEnrollBiz courseEnrollBiz;
	@Autowired
	private LeaveBiz leaveBiz;
	@Autowired
	private StatisticsDao statisticsDao;
	@Autowired
	private ArticlesBiz articlesBiz;
	@Autowired
	private SysUserBiz sysUserBiz;
	@Autowired
	private WorkMsgBiz workMsgBiz;
	@Autowired
	private StaffNoticeSettingBiz staffNoticeSettingBiz;

	/*******************************************************
	 * 工作台
	 */
	/**
	 * 评价签到完成数量
	 */
	public Map<String, Object> infoWorkNum() {
		return courseEnrollBiz.getByWorkNum(MemberUtils.getStaffId());
	}
	
	/**
	 * 我的课程
	 */
	public List<Map<String, Object>> listMyCourse(Course course) {
		if(!StrUtils.notBlank(course.getCourseDate())){
			course.setCourseDate(new Date());
		}
		course.setTeacherId(MemberUtils.getStaffId());
		course.setAssistantId(MemberUtils.getStaffId());
		return courseBiz.listMyCourse(course);
	}
	
	/**
	 * 我的课程id
	 */
	public Map<String, Object> infoMyCourseById(String id) {
		Course course = new Course();
		course.setId(id);
		return courseBiz.infoMyCourseById(course);
	}
	
	/**
	 * 我的课程member
	 */
	public List<CourseEnroll> listMyCourseMember(CourseEnroll courseEnroll) {
		return courseEnrollBiz.findList(courseEnroll);
	}
	
	/**
	 * 我的课程评价
	 */
	public List<CourseEnroll> listMyCourseComplete(CourseEnroll courseEnroll) {
		courseEnroll.setWhere("a.comment_time is not null");
		return courseEnrollBiz.findList(courseEnroll);
	}
	
	/**
	 * 我的请假
	 */
	public List<Leave> listMyLeave(Leave leave) {
		leave.setStaffId(MemberUtils.getStaffId());
		return leaveBiz.findList(leave);
	}
	
	/**
	 * 我的请假详情
	 */
	public Leave infoMyLeave(Leave leave) {
		Leave fLeave = leaveBiz.get(leave);
		
		WorkMsg workMsg = new WorkMsg();
		workMsg.setBizId(leave.getId());
		workMsg.setBizType(WorkMsg.BIZTYPE_21);
		workMsg.setStyle(WorkMsg.STYLE_2);
		workMsg = workMsgBiz.getByEntity(workMsg);
		
		boolean flag = Arrays.asList(workMsg.getCheckUser().split(",")).contains(MemberUtils.getStaffId());
		
		if(!MemberUtils.getStaffId().equals(workMsg.getUserId()) && flag){
			fLeave.setCheckStateType(Leave.CHECKSTATETYPE_1);
		}else{
			fLeave.setCheckStateType(Leave.CHECKSTATETYPE_0);
		}
		
		return fLeave;
	}
	
	/**
	 * 我的请假详情
	 */
	@Transactional(readOnly = false)
	public void updateLeaveIsCancel(Leave leave) {
		leaveBiz.updateIsCancel(leave);
	}
	
	/**
	 * 申请请假
	 */
	@Transactional(readOnly = false)
	public void saveLeave(Leave leave) {
		leave.setStaffId(MemberUtils.getStaffId());
		leaveBiz.save(leave);
		leave = leaveBiz.get(leave.getId());
		
		/**
		 * 发送请假审批
		 */
		WorkMsg workMsg = new WorkMsg();
		workMsg.setUserId(MemberUtils.getStaffId());
		workMsg.setStyle(WorkMsg.STYLE_2);
		workMsg.setBizId(leave.getId());
		workMsg.setBizType(WorkMsg.BIZTYPE_21);
		workMsg.setUrl("../leave/leaveInfo?id="+leave.getId());
		workMsg.setTitle("请假审批");
		String content = "请假类型: "+leave.getTypeTxt()+"<br/>请假人: "+leave.getStaffTxt()+"<br/>请假时间: "+DateUtils.format(leave.getStartTime()) + " - " + DateUtils.format(leave.getEndTime());
		workMsg.setContent(content);
		workMsg.setComId(workMsg.getComId());
		workMsg.setCreateTime(new Date());
		// 查询
		StaffNoticeSetting where = new StaffNoticeSetting();
		where.setLeaveMsg(StaffNoticeSetting.TYPE_0);
		where.setComId(where.getComId());
		String checkUser = "";
		for (StaffNoticeSetting staffNoticeSetting : staffNoticeSettingBiz.findList(where)) {
			checkUser += staffNoticeSetting.getUserId() + ",";
		}
		workMsg.setCheckUser(checkUser);
		workMsgBiz.save(workMsg);
	}
	
	/**
	 * 请假审批
	 */
	@Transactional(readOnly = false)
	public void updateLeaveCheck(String id, String type, String content) {
		// 修改请假审批状态
		Leave leave = leaveBiz.get(id);
		leave.setCheckTime(new Date());
		leave.setCheckRemark(content);
		leave.setCheckStaffId(MemberUtils.getStaffId());
		leave.setCheckState(type);
		leaveBiz.update(leave);
		
		WorkMsg workMsg = new WorkMsg();
		workMsg.setBizId(id);
		workMsg.setBizType(WorkMsg.BIZTYPE_21);
		workMsg.setStyle(WorkMsg.STYLE_2);
		workMsg = workMsgBiz.getByEntity(workMsg);
		workMsg.setCheckRemark(content);
		workMsg.setCheckState(type);
		workMsg.setCheckTime(new Date());
		workMsg.setCheckUser(MemberUtils.getStaffId());
		workMsgBiz.update(workMsg);
		
		/**
		 * 需要发送模板消息
		 */
	}
	
	/**
	 * 我的业绩
	 */
	public Map<String, Object> infoAchieve(String date) {
		Map<String, Object> map = new HashMap<>();
		map.put("date", date + "-00");
		map.put("userId", MemberUtils.getStaffId());
		return statisticsDao.findMyStatistics(map);
	}
	
	/**
	 * 员工通知
	 */
	public Object listStaffArticles(String type,Integer page,Integer rows) {
		SysUser sysUser = sysUserBiz.get(MemberUtils.getStaffId());
		return articlesBiz.listStaffArticles(type, sysUser.getComId(),page,rows);
	}
	
	/**
	 * 员工通知详情
	 */
	public Object infoStaffArticles(String id) {
		return articlesBiz.get(id);
	}
	
	/**
	 * 我的消息
	 */
	public Object pageMyWorkMsg(Integer page,Integer rows) {
		Integer srow = 0;
		Integer erow = 5;
		srow = (page-1)*rows;
		erow = page*rows;
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("list", workMsgBiz.findWorkMsgPage(MemberUtils.getStaffId(), srow, erow, "limit"));
		map.put("total", workMsgBiz.findWorkMsgPage(MemberUtils.getStaffId(), srow, erow, null).size());
		return map;
	}
	
	/**
	 * 改变我的消息状态
	 */
	@Transactional(readOnly = false)
	public void updateMyWorkMsg(String id) {
		WorkMsg workMsg = new WorkMsg();
		workMsg.setId(id);
		workMsg.setReadState(WorkMsg.READSTATE_1);
		workMsgBiz.update(workMsg);
	}
	
}
