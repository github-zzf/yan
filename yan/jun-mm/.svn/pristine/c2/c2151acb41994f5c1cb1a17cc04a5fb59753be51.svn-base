package com.junkj.common.filter;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.HandlerInterceptor;

import com.junkj.common.biz.BaseBiz;
import com.junkj.common.config.Global;
import com.junkj.common.utils.ComUtils;
import com.junkj.common.utils.JsonUtils;
import com.junkj.common.vo.JsonVo;
import com.junkj.module.sys.entity.SysCompany;

public class ComFilter extends BaseBiz implements HandlerInterceptor {

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {

		response.setHeader("Access-Control-Allow-Origin", request.getHeader("Origin"));// 不能为*，*代表接受所有域名访问，如写*则下面一行代码无效。
		response.setHeader("Access-Control-Allow-Headers", "content-type,token");// 不能为*
		response.setHeader("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
		response.setHeader("Access-Control-Allow-Credentials", "true");// 前三行解决跨域，这一句行是携带证书(关键)

		String methods = request.getMethod();
		if ("OPTIONS".equals(methods)) {
			return false;
		}

		JsonVo error = null;

		String origin = request.getHeader("Origin");
		if (origin == null) {
			origin = request.getHeader("Referer");
		}
		logger.error("【origin】========" + origin+"========"+ request.getServletPath());
		// 域名验证
		if (origin == null) {
			error = JsonVo.sendError("授权认证没有通过!非法域名");
		}
		if (error == null) {
			String str = origin.split("//")[1];
			String comId = str.split("\\.")[0].split("/")[0];
			if (!Global.isDev() && !origin.startsWith("http://"+comId + "." + Global.mobileUri())) {
				error = JsonVo.sendError("授权认证没有通过!非法域名");
			}
			// 企业编码验证
			SysCompany company = ComUtils.getById(comId);
			if (company != null) {
				request.setAttribute(ComUtils.CACHE_COM_ID_, comId);
			} else {
				error = JsonVo.sendError("授权认证没有通过!非法域名");
			}
		}

		if (error != null) {
			PrintWriter writer = null;
			OutputStreamWriter osw = null;
			try {
				response.setContentType("application/json;charset=utf-8");
				osw = new OutputStreamWriter(response.getOutputStream(), "UTF-8");
				writer = new PrintWriter(osw, true);
				String jsonStr = JsonUtils.toString(error);
				writer.write(jsonStr);
				writer.flush();
				writer.close();
				osw.close();
			} catch (UnsupportedEncodingException e) {
				logger.error("过滤器返回信息失败:" + e.getMessage(), e);
			} catch (IOException e) {
				logger.error("过滤器返回信息失败:" + e.getMessage(), e);
			} finally {
				if (null != writer) {
					writer.close();
				}
				if (null != osw) {
					osw.close();
				}
			}
			return false;
		}
		return true;
	}

}